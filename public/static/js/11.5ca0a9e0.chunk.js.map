{"version":3,"sources":["ofertas/pages/OfertasRecibidas.js"],"names":["OfertasRecibidas","useState","loadedPlayers","setLoadedPlayers","useHttpClient","isLoading","error","sendRequest","clearError","update","setUpdate","userId","useParams","useEffect","a","process","responseData","players","filter","player","ofertas","length","fetchPlayers","updateHandler","Fragment","onClear","className","items","onDeletePlayer","deletedPlayerId","prevPlayers","id","onUpdate","onUpdateOffer"],"mappings":"iNAqEeA,UA7DU,WACvB,MAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACvC,EAA4BP,oBAAS,GAArC,mBAAOQ,EAAP,KAAeC,EAAf,KACMC,EAASC,cAAYD,OAE3BE,qBAAU,YAEU,uCAAG,4BAAAC,EAAA,+EAEUP,EAAY,GAAD,OACjCQ,wCADiC,yBACiBJ,IAHtC,OAEXK,EAFW,OAMjBb,EACEa,EAAaC,QAAQC,QAAO,SAACC,GAAD,OAAYA,EAAOC,QAAQC,OAAS,MAPjD,uGAAH,qDAmBlBC,KAEC,CAACf,EAAaI,EAAQF,IAEzB,IAKMc,EAAgB,WACpBb,GAAWD,IAGb,OACE,kBAAC,IAAMe,SAAP,KACE,kBAAC,IAAD,CAAYlB,MAAOA,EAAOmB,QAASjB,KACjCH,GAAaH,GAAiB,kBAAC,IAAD,MAC/BG,GACC,yBAAKqB,UAAU,UACb,kBAAC,IAAD,QAGFrB,GAAaH,GACb,kBAAC,IAAD,CACEyB,MAAOzB,EACP0B,eArBqB,SAACC,GAC5B1B,GAAiB,SAAC2B,GAAD,OACfA,EAAYZ,QAAO,SAACC,GAAD,OAAYA,EAAOY,KAAOF,SAoBzCG,SAAUT,EACVU,cAAeV","file":"static/js/11.5ca0a9e0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Presupuesto from \"../../shared/components/Navigation/Presupuesto\";\nimport PlayerList from \"../../players/components/PlayerList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\n\nconst OfertasRecibidas = () => {\n  const [loadedPlayers, setLoadedPlayers] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [update, setUpdate] = useState(false);\n  const userId = useParams().userId;\n\n  useEffect(() => {\n    //const abortCont = new AbortController();\n    const fetchPlayers = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/players/user/${userId}`\n          /*  { signal: abortCont.signal } */\n        );\n        setLoadedPlayers(\n          responseData.players.filter((player) => player.ofertas.length > 0)\n        );\n        /* const userHasOffers = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/ofertas/get/receivedOffers/${auth.userId}`\n        );\n\n        var existing = localStorage.getItem(\"userData\");\n        existing = JSON.parse(existing);\n        existing.hasOffers = userHasOffers;\n        localStorage.setItem(\"userData\", JSON.stringify(existing)); */\n      } catch (err) {}\n    };\n    fetchPlayers();\n    //return () => abortCont.abort();\n  }, [sendRequest, userId, update]);\n\n  const playerDeletedHandler = (deletedPlayerId) => {\n    setLoadedPlayers((prevPlayers) =>\n      prevPlayers.filter((player) => player.id !== deletedPlayerId)\n    );\n  };\n  const updateHandler = () => {\n    setUpdate(!update);\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlayers && <Presupuesto></Presupuesto>}\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlayers && (\n        <PlayerList\n          items={loadedPlayers}\n          onDeletePlayer={playerDeletedHandler}\n          onUpdate={updateHandler}\n          onUpdateOffer={updateHandler}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default OfertasRecibidas;\n"],"sourceRoot":""}