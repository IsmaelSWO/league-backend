{"version":3,"sources":["ofertas/pages/OfertasRealizadas.js"],"names":["OfertasRealizadas","props","useState","loadedPlayers","setLoadedPlayers","useHttpClient","isLoading","error","sendRequest","clearError","update","setUpdate","auth","useContext","AuthContext","useEffect","a","process","responseData","players","filter","player","ofertas","some","oferta","ofertanteId","userId","fetchPlayers","Fragment","onClear","className","items","onUpdate","onDeletePlayer","deletedPlayerId","prevPlayers","id"],"mappings":"kNAkEeA,UA1DW,SAACC,GACzB,MAA0CC,qBAA1C,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACvC,EAA4BP,oBAAS,GAArC,mBAAOQ,EAAP,KAAeC,EAAf,KACMC,EAAOC,qBAAWC,KAExBC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,+EAEUR,EACzBS,uEAHe,OAEXC,EAFW,OAKjBd,EACEc,EAAaC,QAAQC,QAAO,SAACC,GAAD,OAC1BA,EAAOC,QAAQC,MAAK,SAACC,GAAD,OAAYA,EAAOC,cAAgBb,EAAKc,cAP/C,uGAAH,qDAmBlBC,KACC,CAACnB,EAAaI,EAAKc,OAAQhB,IAW9B,OACE,kBAAC,IAAMkB,SAAP,KACE,kBAAC,IAAD,CAAYrB,MAAOA,EAAOsB,QAASpB,KACjCH,GAAaH,GAAiB,kBAAC,IAAD,MAC/BG,GACC,yBAAKwB,UAAU,UACb,kBAAC,IAAD,QAGFxB,GAAaH,GACb,kBAAC,IAAD,CACE4B,MAAO5B,EACP6B,SAhBc,WACpBrB,GAAWD,IAgBLuB,eAtBqB,SAACC,GAC5B9B,GAAiB,SAAC+B,GAAD,OACfA,EAAYf,QAAO,SAACC,GAAD,OAAYA,EAAOe,KAAOF","file":"static/js/10.dfef7377.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\nimport Presupuesto from \"../../shared/components/Navigation/Presupuesto\";\nimport PlayerList from \"../../players/components/PlayerList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nconst OfertasRealizadas = (props) => {\n  const [loadedPlayers, setLoadedPlayers] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [update, setUpdate] = useState(false);\n  const auth = useContext(AuthContext);\n\n  useEffect(() => {\n    const fetchPlayers = async () => {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/players/top/ofertasrealizadas\"\n        );\n        setLoadedPlayers(\n          responseData.players.filter((player) =>\n            player.ofertas.some((oferta) => oferta.ofertanteId === auth.userId)\n          )\n        );\n        /* const userHasOffers = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/ofertas/get/receivedOffers/${auth.userId}`\n        );\n        var existing = localStorage.getItem(\"userData\");\n        existing = JSON.parse(existing);\n        existing.hasOffers = userHasOffers;\n        localStorage.setItem(\"userData\", JSON.stringify(existing)); */\n      } catch (err) {}\n    };\n    fetchPlayers();\n  }, [sendRequest, auth.userId, update]);\n\n  const playerDeletedHandler = (deletedPlayerId) => {\n    setLoadedPlayers((prevPlayers) =>\n      prevPlayers.filter((player) => player.id !== deletedPlayerId)\n    );\n  };\n  const updateHandler = () => {\n    setUpdate(!update);\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlayers && <Presupuesto></Presupuesto>}\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlayers && (\n        <PlayerList\n          items={loadedPlayers}\n          onUpdate={updateHandler}\n          onDeletePlayer={playerDeletedHandler}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default OfertasRealizadas;\n"],"sourceRoot":""}