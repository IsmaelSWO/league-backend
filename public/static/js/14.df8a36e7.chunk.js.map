{"version":3,"sources":["users/pages/Users.js"],"names":["Users","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedUsers","setLoadedUsers","auth","useContext","AuthContext","useEffect","a","process","responseData","users","fetchUsers","Fragment","onClear","isLoggedIn","className","items"],"mappings":"kNA0CeA,UAlCD,WACZ,MAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACvC,EAAsCC,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAOC,qBAAWC,KAiBxB,OAfAC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,+EAEYT,EACzBU,+CAHa,OAETC,EAFS,OAMfP,EACEO,EAAaC,OAPA,uGAAH,qDAWhBC,KACC,CAACb,IAGF,kBAAC,IAAMc,SAAP,KACE,kBAAC,IAAD,CAAYf,MAAOA,EAAOgB,QAASd,IAClCI,EAAKW,YAAc,kBAAC,IAAD,MACnBlB,GACC,yBAAKmB,UAAU,UACb,kBAAC,IAAD,QAGFnB,GAAaK,GAAe,kBAAC,IAAD,CAAWe,MAAOf","file":"static/js/14.df8a36e7.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from \"react\";\nimport UsersList from \"../components/UsersList\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport Presupuesto from \"../../shared/components/Navigation/Presupuesto\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\n\nconst Users = () => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [loadedUsers, setLoadedUsers] = useState();\n  const auth = useContext(AuthContext);\n\n  useEffect(() => {\n    const fetchUsers = async () => {\n      try {\n        const responseData = await sendRequest(\n          process.env.REACT_APP_BACKEND_URL + \"/users\"\n        );\n\n        setLoadedUsers(\n          responseData.users /* .filter((user) => user.equipo !== \"Sin equipo\") */\n        );\n      } catch (err) {}\n    };\n    fetchUsers();\n  }, [sendRequest]);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {auth.isLoggedIn && <Presupuesto></Presupuesto>}\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedUsers && <UsersList items={loadedUsers} />}\n    </React.Fragment>\n  );\n};\n\nexport default Users;\n"],"sourceRoot":""}